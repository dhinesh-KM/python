openapi: "3.0.3"
info:
  title: API documenation
  description: writing specs for API documentation
  version: 1.0.1
servers:
  - url: http://127.0.0.1:8000/
 

paths:
  /user/:
    post:
      tags:
        - USER
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  /user/all/:
    get:
      tags:
        - USER
      summary: Retrieve all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
  /user/{id}/:
    get:
      tags:
        - USER
      summary: Retrieve a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to get
          
      responses:
        '200':
          description: The requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    put:
      tags:
        - USER
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/putuse'
          
          
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - USER
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
          
  /login/:
    post:
      summary: Log in a user
      operationId: loginUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      refresh_token:
                        type: string
                      email:
                        type: string
                      username:
                        type: string
                      firstname:
                        type: string
                      lastname:
                        type: string
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
          
  /post/all/:
    get:
      tags:
        - POST
      summary: Retrieve a list of posts
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /post/:
    post:
      tags:
        - POST
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
              
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              
  /post/{id}/:
    get:
      tags:
        - POST
      summary: Retrieve a post by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - POST
      summary: Update a post by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
              
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              
    patch:
      tags:
        - POST
      summary: Update a post by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
              
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              
    delete:
      tags:
        - POST
      summary: Delete a post by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
          
  /comment/{id}/all/:
    get:
      tags:
        - COMMENT
      summary: Retrieve comments for a post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
                  
  /comment/:
    post:
      tags:
        - COMMENT
      summary: Create a new comment for a post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
              
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
                
  /comment/{id}/:
    get:
      tags:
        - COMMENT
      summary: Retrieve a comment by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: The requested comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      tags:
        - COMMENT
      summary: Update a comment by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
              
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
        - COMMENT
      summary: Delete a comment by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            
      responses:
        '204':
          description: Comment deleted successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        password1:
          type: string
        password2:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    user:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    putuse:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          type: string
        publication_date:
          type: string
        comment_set:
          type: array
          items:
            type: string
            format: uri
    PostInput:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: string
        post:
          type: string
        user:
          type: string
        comment:
          type: string
        comment_at:
          type: string
    CommentInput:
      type: object
      properties:
        post_id:
          type: string
        comment:
          type: string
        
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
